apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

def projectRoot = rootDir.getAbsoluteFile().getParentFile().getAbsolutePath()

react {
  entryFile = file(["node", "-e", "require('expo/scripts/resolveAppEntry')", projectRoot, "android", "absolute"].execute(null, rootDir).text.trim())
  reactNativeDir = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()
  hermesCommand = new File(["node", "--print", "require.resolve('react-native/package.json')"].execute(null, rootDir).text.trim()).getParentFile().getAbsolutePath() + "/sdks/hermesc/%OS-BIN%/hermesc"
  codegenDir = new File(["node", "--print", "require.resolve('@react-native/codegen/package.json', { paths: [require.resolve('react-native/package.json')] })"].execute(null, rootDir).text.trim()).getParentFile().getAbsoluteFile()

  // Expo CLI для бандлинга
  cliFile = new File(["node", "--print", "require.resolve('@expo/cli', { paths: [require.resolve('expo/package.json')] })"].execute(null, rootDir).text.trim())
  bundleCommand = "export:embed"

  autolinkLibrariesWithApp()
}

def enableProguardInReleaseBuilds = (findProperty('android.enableProguardInReleaseBuilds') ?: false).toBoolean()
def jscFlavor = 'org.webkit:android-jsc:+'

android {
  ndkVersion rootProject.ext.ndkVersion
  buildToolsVersion rootProject.ext.buildToolsVersion
  compileSdk rootProject.ext.compileSdkVersion

  namespace 'com.rosenbergvictor72.pealim2'

  defaultConfig {
    applicationId 'com.rosenbergvictor72.pealim2'
    minSdkVersion rootProject.ext.minSdkVersion
    targetSdkVersion rootProject.ext.targetSdkVersion
    versionCode 2000010
    versionName "1.1.1"

    // Всегда подсказываем выбор flavor’а зависимостям (react-native-iap и т.п.)
    missingDimensionStrategy 'store', 'play'
  }

  signingConfigs {
    debug {
      storeFile file('debug.keystore')
      storePassword 'android'
      keyAlias 'androiddebugkey'
      keyPassword 'android'
    }
    // TODO: для продакшена создай release keystore и подключи здесь
    // release { ... }
  }

  buildTypes {
    debug {
      signingConfig signingConfigs.debug
    }
    release {
      signingConfig signingConfigs.debug
      shrinkResources (findProperty('android.enableShrinkResourcesInReleaseBuilds')?.toBoolean() ?: false)
      minifyEnabled enableProguardInReleaseBuilds
      proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
      crunchPngs (findProperty('android.enablePngCrunchInReleaseBuilds')?.toBoolean() ?: true)
    }
  }

  // Всегда объявляем измерение и единственный flavor — play
  flavorDimensions "store"
  productFlavors {
    play { dimension "store" }
    // amazon не нужен — не объявляем
  }

  packagingOptions {
    jniLibs {
      useLegacyPackaging (findProperty('expo.useLegacyPackaging')?.toBoolean() ?: false)
    }
  }

  androidResources {
    ignoreAssetsPattern '!.svn:!.git:!.ds_store:!*.scc:!CVS:!thumbs.db:!picasa.ini:!*~'
  }
}

// Подхват опций из gradle.properties (если есть)
["pickFirsts", "excludes", "merges", "doNotStrip"].each { prop ->
  def options = (findProperty("android.packagingOptions.$prop") ?: "").split(",")
  for (i in 0..<options.size()) options[i] = options[i].trim()
  options -= ""
  if (options.length > 0) {
    println "android.packagingOptions.$prop += $options ($options.length)"
    options.each { android.packagingOptions[prop] += it }
  }
}

dependencies {
  implementation("com.facebook.react:react-android")

  def isGifEnabled = (findProperty('expo.gif.enabled') ?: "") == "true";
  def isWebpEnabled = (findProperty('expo.webp.enabled') ?: "") == "true";
  def isWebpAnimatedEnabled = (findProperty('expo.webp.animated') ?: "") == "true";

  if (isGifEnabled) {
    implementation("com.facebook.fresco:animated-gif:${reactAndroidLibs.versions.fresco.get()}")
  }
  if (isWebpEnabled) {
    implementation("com.facebook.fresco:webpsupport:${reactAndroidLibs.versions.fresco.get()}")
    if (isWebpAnimatedEnabled) {
      implementation("com.facebook.fresco:animated-webp:${reactAndroidLibs.versions.fresco.get()}")
    }
  }

  if (hermesEnabled.toBoolean()) {
    implementation("com.facebook.react:hermes-android")
  } else {
    implementation jscFlavor
  }
}

apply plugin: 'com.google.gms.google-services'

// ⚠️ Никаких configurations.configureEach{} и ручного Attribute.of(...)
// Выбор варианта обеспечивают missingDimensionStrategy + productFlavors.
